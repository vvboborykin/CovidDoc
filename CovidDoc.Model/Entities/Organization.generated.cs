//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.7.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace CovidDoc.Model
{
   /// <summary>
   /// Базовый класс для сущностей юрлиц
   /// </summary>
   [System.ComponentModel.Description("Базовый класс для сущностей юрлиц")]
   public partial class Organization
   {
      partial void Init();

      /// <summary>
      /// Default constructor
      /// </summary>
      public Organization()
      {
         IsLab = false;
         IsHospital = true;
         AppUsers = new System.Collections.Generic.HashSet<global::CovidDoc.Model.AppUser>();
         Documents = new System.Collections.Generic.HashSet<global::CovidDoc.Model.Document>();
         Children = new System.Collections.Generic.HashSet<global::CovidDoc.Model.Organization>();

         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="name"></param>
      /// <param name="orgn"></param>
      /// <param name="islab"></param>
      /// <param name="ishospital"></param>
      /// <param name="email"></param>
      public Organization(string name, string orgn, string email, bool islab = false, bool ishospital = true)
      {
         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;

         if (string.IsNullOrEmpty(orgn)) throw new ArgumentNullException(nameof(orgn));
         this.Orgn = orgn;

         this.IsLab = islab;

         this.IsHospital = ishospital;

         if (string.IsNullOrEmpty(email)) throw new ArgumentNullException(nameof(email));
         this.Email = email;

         AppUsers = new System.Collections.Generic.HashSet<global::CovidDoc.Model.AppUser>();
         Documents = new System.Collections.Generic.HashSet<global::CovidDoc.Model.Document>();
         Children = new System.Collections.Generic.HashSet<global::CovidDoc.Model.Organization>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="name"></param>
      /// <param name="orgn"></param>
      /// <param name="islab"></param>
      /// <param name="ishospital"></param>
      /// <param name="email"></param>
      public static Organization Create(string name, string orgn, string email, bool islab = false, bool ishospital = true)
      {
         return new Organization(name, orgn, email, islab, ishospital);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// Unique identifier
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Unique identifier")]
      public long Id { get; set; }

      /// <summary>
      /// Indexed, Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Наименование")]
      public string Name { get; set; }

      /// <summary>
      /// Indexed, Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="ОГРН")]
      public string Orgn { get; set; }

      /// <summary>
      /// Required, Default value = false
      /// </summary>
      [Required]
      [Display(Name="Выполняет функции лаборатории")]
      public bool IsLab { get; set; }

      /// <summary>
      /// Required, Default value = true
      /// </summary>
      [Required]
      [Display(Name="Выполняет функции госпиталя")]
      public bool IsHospital { get; set; }

      /// <summary>
      /// Indexed, Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Электронная почта")]
      public string Email { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      [Display(Name="Пользователи")]
      public virtual ICollection<global::CovidDoc.Model.AppUser> AppUsers { get; private set; }

      [Display(Name="Документы")]
      public virtual ICollection<global::CovidDoc.Model.Document> Documents { get; private set; }

      [Display(Name="Подразделения")]
      public virtual ICollection<global::CovidDoc.Model.Organization> Children { get; private set; }

      [Display(Name="Вышестоящая организация")]
      public virtual global::CovidDoc.Model.Organization Parent { get; set; }

   }
}

