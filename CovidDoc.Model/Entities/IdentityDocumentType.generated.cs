//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.7.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace CovidDoc.Model
{
   /// <summary>
   /// Тип документа удостоверяющего личность
   /// </summary>
   [System.ComponentModel.Description("Тип документа удостоверяющего личность")]
   public partial class IdentityDocumentType
   {
      partial void Init();

      /// <summary>
      /// Default constructor
      /// </summary>
      public IdentityDocumentType()
      {
         IdentityDocuments = new System.Collections.Generic.HashSet<global::CovidDoc.Model.IdentityDocument>();

         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="code"></param>
      /// <param name="name"></param>
      /// <param name="serialpattern"></param>
      /// <param name="numberpattern"></param>
      public IdentityDocumentType(string code, string name, string serialpattern, string numberpattern)
      {
         if (string.IsNullOrEmpty(code)) throw new ArgumentNullException(nameof(code));
         this.Code = code;

         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this.Name = name;

         if (string.IsNullOrEmpty(serialpattern)) throw new ArgumentNullException(nameof(serialpattern));
         this.SerialPattern = serialpattern;

         if (string.IsNullOrEmpty(numberpattern)) throw new ArgumentNullException(nameof(numberpattern));
         this.NumberPattern = numberpattern;

         IdentityDocuments = new System.Collections.Generic.HashSet<global::CovidDoc.Model.IdentityDocument>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="code"></param>
      /// <param name="name"></param>
      /// <param name="serialpattern"></param>
      /// <param name="numberpattern"></param>
      public static IdentityDocumentType Create(string code, string name, string serialpattern, string numberpattern)
      {
         return new IdentityDocumentType(code, name, serialpattern, numberpattern);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// Unique identifier
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Unique identifier")]
      public long Id { get; set; }

      /// <summary>
      /// Indexed, Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      [Display(Name="Код")]
      public string Code { get; set; }

      /// <summary>
      /// Indexed, Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Наименование")]
      public string Name { get; set; }

      /// <summary>
      /// Indexed, Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Шаблон серии документа")]
      public string SerialPattern { get; set; }

      /// <summary>
      /// Indexed, Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Шаблон номера документа")]
      public string NumberPattern { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      [Display(Name="Документы")]
      public virtual ICollection<global::CovidDoc.Model.IdentityDocument> IdentityDocuments { get; private set; }

   }
}

