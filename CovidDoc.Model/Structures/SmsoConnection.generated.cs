//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.7.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace CovidDoc.Model
{
   public partial class SmsoConnection
   {
      partial void Init();

      /// <summary>
      /// Default constructor
      /// </summary>
      public SmsoConnection()
      {
         Init();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="host"></param>
      /// <param name="port"></param>
      /// <param name="database"></param>
      /// <param name="username"></param>
      /// <param name="password"></param>
      /// <param name="_smso0"></param>
      public SmsoConnection(string host, string port, string database, string username, string password, global::CovidDoc.Model.Smso _smso0)
      {
         if (string.IsNullOrEmpty(host)) throw new ArgumentNullException(nameof(host));
         this.Host = host;

         if (string.IsNullOrEmpty(port)) throw new ArgumentNullException(nameof(port));
         this.Port = port;

         if (string.IsNullOrEmpty(database)) throw new ArgumentNullException(nameof(database));
         this.Database = database;

         if (string.IsNullOrEmpty(username)) throw new ArgumentNullException(nameof(username));
         this.UserName = username;

         if (string.IsNullOrEmpty(password)) throw new ArgumentNullException(nameof(password));
         this.Password = password;

         if (_smso0 == null) throw new ArgumentNullException(nameof(_smso0));
         _smso0.SmsoConnection = this;

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="host"></param>
      /// <param name="port"></param>
      /// <param name="database"></param>
      /// <param name="username"></param>
      /// <param name="password"></param>
      /// <param name="_smso0"></param>
      public static SmsoConnection Create(string host, string port, string database, string username, string password, global::CovidDoc.Model.Smso _smso0)
      {
         return new SmsoConnection(host, port, database, username, password, _smso0);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="MySQL сервер (IP или доменное имя)")]
      public string Host { get; set; }

      /// <summary>
      /// Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Порт MySQL сервера")]
      public string Port { get; set; }

      /// <summary>
      /// Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Наименование базы данных")]
      public string Database { get; set; }

      /// <summary>
      /// Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Имя пользователя")]
      public string UserName { get; set; }

      /// <summary>
      /// Required, Max length = 255
      /// </summary>
      [Required]
      [MaxLength(255)]
      [StringLength(255)]
      [Display(Name="Пароль")]
      public string Password { get; set; }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

   }
}

