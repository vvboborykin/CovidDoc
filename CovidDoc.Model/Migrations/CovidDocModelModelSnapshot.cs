// <auto-generated />
using System;
using CovidDoc.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CovidDoc.Model.Migrations
{
    [DbContext(typeof(CovidDocModel))]
    partial class CovidDocModelModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("AppRoleAppUser", b =>
                {
                    b.Property<long>("RolesId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AppRole_Users_x_AppUser_Roles");
                });

            modelBuilder.Entity("CovidDoc.Model.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Appartment")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Building")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long?>("PatientRegAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Appartment")
                        .IsUnique();

                    b.HasIndex("Building")
                        .IsUnique();

                    b.HasIndex("District")
                        .IsUnique();

                    b.HasIndex("House")
                        .IsUnique();

                    b.HasIndex("PatientRegAddressId")
                        .IsUnique();

                    b.HasIndex("Region")
                        .IsUnique();

                    b.HasIndex("Street")
                        .IsUnique();

                    b.HasIndex("Town")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CovidDoc.Model.AppRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long?>("StatusTransitionGrantedForRolesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatusTransitionGrantedForRolesId");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("CovidDoc.Model.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("DocumentModifiedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SmsoPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentModifiedByUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AppUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("CovidDoc.Model.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreateByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("DocumentStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("DocumentStatusId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Document");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Document");
                });

            modelBuilder.Entity("CovidDoc.Model.DocumentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentStatus");
                });

            modelBuilder.Entity("CovidDoc.Model.Hospitalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReferralItemHospitalizationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HospitalName")
                        .IsUnique();

                    b.HasIndex("ReferralItemHospitalizationId")
                        .IsUnique();

                    b.ToTable("Hospitalization");
                });

            modelBuilder.Entity("CovidDoc.Model.IdentityDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("IdentityDocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdentityDocumentTypeId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.HasIndex("Serial")
                        .IsUnique();

                    b.ToTable("IdentityDocument");
                });

            modelBuilder.Entity("CovidDoc.Model.IdentityDocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberPattern")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialPattern")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NumberPattern")
                        .IsUnique();

                    b.HasIndex("SerialPattern")
                        .IsUnique();

                    b.ToTable("IdentityDocumentType");
                });

            modelBuilder.Entity("CovidDoc.Model.LabOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("LabServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReferralItemLabOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("TestSystemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LabServiceId");

                    b.HasIndex("ReferralItemLabOrderId")
                        .IsUnique();

                    b.HasIndex("TestSystemId");

                    b.ToTable("LabOrder");
                });

            modelBuilder.Entity("CovidDoc.Model.LabResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReferralItemLabResultId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ResearchResultId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ResearchTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ResultCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReferralItemLabResultId")
                        .IsUnique();

                    b.HasIndex("ResearchResultId");

                    b.HasIndex("ResearchTypeId");

                    b.ToTable("LabResult");
                });

            modelBuilder.Entity("CovidDoc.Model.LabService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LabService");
                });

            modelBuilder.Entity("CovidDoc.Model.Mis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Mis");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Mis");
                });

            modelBuilder.Entity("CovidDoc.Model.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHospital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsLab")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Orgn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Orgn");

                    b.HasIndex("ParentId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("CovidDoc.Model.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("FactAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentFio")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatrName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Номер телефона");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Номер полиса ОМС единого образца");

                    b.Property<byte>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((byte)2);

                    b.Property<string>("Snils")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FactAddressId")
                        .IsUnique();

                    b.HasIndex("FirstName")
                        .IsUnique();

                    b.HasIndex("LastName")
                        .IsUnique();

                    b.HasIndex("ParentFio")
                        .IsUnique();

                    b.HasIndex("PatrName")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Policy")
                        .IsUnique();

                    b.HasIndex("Snils")
                        .IsUnique();

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("CovidDoc.Model.RecurrenceDisease", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MKB")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReferralItemRecurrenceDiseaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UNRZ")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MKB")
                        .IsUnique();

                    b.HasIndex("ReferralItemRecurrenceDiseaseId")
                        .IsUnique();

                    b.HasIndex("UNRZ")
                        .IsUnique();

                    b.ToTable("RecurrenceDisease");
                });

            modelBuilder.Entity("CovidDoc.Model.ReferralItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ct")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte?>("CureDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DiseaseDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLeaveCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MKB")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Patalogy")
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProbeDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("ReferralPackId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestReasonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MKB")
                        .IsUnique();

                    b.HasIndex("Patalogy")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferralPackId");

                    b.HasIndex("TestReasonId");

                    b.ToTable("ReferralItem");
                });

            modelBuilder.Entity("CovidDoc.Model.ResearchResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ResearchResult");
                });

            modelBuilder.Entity("CovidDoc.Model.ResearchType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ResearchType");
                });

            modelBuilder.Entity("CovidDoc.Model.Signature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("SignData")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SignDateTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("SignatoryUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SignatoryUserId");

                    b.ToTable("Signature");
                });

            modelBuilder.Entity("CovidDoc.Model.SmsoEventType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SmsoEventType");
                });

            modelBuilder.Entity("CovidDoc.Model.StatusTransition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoRunPredicate")
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnablePredicate")
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT");

                    b.Property<long?>("InitialStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("TargetStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InitialStatusId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TargetStatusId");

                    b.ToTable("StatusTransition");
                });

            modelBuilder.Entity("CovidDoc.Model.TestReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestReason");
                });

            modelBuilder.Entity("CovidDoc.Model.TestSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TestSystem");
                });

            modelBuilder.Entity("CovidDoc.Model.Vaccination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastVaccinationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ReferralItemVaccinationId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VaccineTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReferralItemVaccinationId")
                        .IsUnique();

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("Vaccination");
                });

            modelBuilder.Entity("CovidDoc.Model.VaccineType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VaccineType");
                });

            modelBuilder.Entity("CovidDoc.Model.Work", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("CovidDoc.Model.Doctor", b =>
                {
                    b.HasBaseType("CovidDoc.Model.AppUser");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("CovidDoc.Model.ReferralPack", b =>
                {
                    b.HasBaseType("CovidDoc.Model.Document");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("LaboratoryId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ReferralPack");
                });

            modelBuilder.Entity("CovidDoc.Model.Smso", b =>
                {
                    b.HasBaseType("CovidDoc.Model.Mis");

                    b.HasDiscriminator().HasValue("Smso");
                });

            modelBuilder.Entity("AppRoleAppUser", b =>
                {
                    b.HasOne("CovidDoc.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CovidDoc.Model.Address", b =>
                {
                    b.HasOne("CovidDoc.Model.Patient", null)
                        .WithOne("RegAddress")
                        .HasForeignKey("CovidDoc.Model.Address", "PatientRegAddressId");
                });

            modelBuilder.Entity("CovidDoc.Model.AppRole", b =>
                {
                    b.HasOne("CovidDoc.Model.StatusTransition", null)
                        .WithMany("GrantedForRoles")
                        .HasForeignKey("StatusTransitionGrantedForRolesId");
                });

            modelBuilder.Entity("CovidDoc.Model.AppUser", b =>
                {
                    b.HasOne("CovidDoc.Model.Document", null)
                        .WithMany("ModifiedByUser")
                        .HasForeignKey("DocumentModifiedByUserId");

                    b.HasOne("CovidDoc.Model.Organization", "Organization")
                        .WithMany("AppUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CovidDoc.Model.Document", b =>
                {
                    b.HasOne("CovidDoc.Model.AppUser", "CreateByUser")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("CreateByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.DocumentStatus", "DocumentStatus")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.Organization", "Organization")
                        .WithMany("Documents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateByUser");

                    b.Navigation("DocumentStatus");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CovidDoc.Model.Hospitalization", b =>
                {
                    b.HasOne("CovidDoc.Model.ReferralItem", null)
                        .WithOne("Hospitalization")
                        .HasForeignKey("CovidDoc.Model.Hospitalization", "ReferralItemHospitalizationId");
                });

            modelBuilder.Entity("CovidDoc.Model.IdentityDocument", b =>
                {
                    b.HasOne("CovidDoc.Model.IdentityDocumentType", "IdentityDocumentType")
                        .WithMany("IdentityDocuments")
                        .HasForeignKey("IdentityDocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.Patient", "Patient")
                        .WithMany("IdentityDocuments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityDocumentType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CovidDoc.Model.LabOrder", b =>
                {
                    b.HasOne("CovidDoc.Model.LabService", "LabService")
                        .WithMany("LabOrders")
                        .HasForeignKey("LabServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.ReferralItem", null)
                        .WithOne("LabOrder")
                        .HasForeignKey("CovidDoc.Model.LabOrder", "ReferralItemLabOrderId");

                    b.HasOne("CovidDoc.Model.TestSystem", "TestSystem")
                        .WithMany("LabOrders")
                        .HasForeignKey("TestSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabService");

                    b.Navigation("TestSystem");
                });

            modelBuilder.Entity("CovidDoc.Model.LabResult", b =>
                {
                    b.HasOne("CovidDoc.Model.ReferralItem", null)
                        .WithOne("LabResult")
                        .HasForeignKey("CovidDoc.Model.LabResult", "ReferralItemLabResultId");

                    b.HasOne("CovidDoc.Model.ResearchResult", "ResearchResult")
                        .WithMany("LabResults")
                        .HasForeignKey("ResearchResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.ResearchType", "ResearchType")
                        .WithMany("LabResults")
                        .HasForeignKey("ResearchTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchResult");

                    b.Navigation("ResearchType");
                });

            modelBuilder.Entity("CovidDoc.Model.Organization", b =>
                {
                    b.HasOne("CovidDoc.Model.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CovidDoc.Model.Patient", b =>
                {
                    b.HasOne("CovidDoc.Model.Address", "FactAddress")
                        .WithOne()
                        .HasForeignKey("CovidDoc.Model.Patient", "FactAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactAddress");
                });

            modelBuilder.Entity("CovidDoc.Model.RecurrenceDisease", b =>
                {
                    b.HasOne("CovidDoc.Model.ReferralItem", null)
                        .WithOne("RecurrenceDisease")
                        .HasForeignKey("CovidDoc.Model.RecurrenceDisease", "ReferralItemRecurrenceDiseaseId");
                });

            modelBuilder.Entity("CovidDoc.Model.ReferralItem", b =>
                {
                    b.HasOne("CovidDoc.Model.AppUser", "CreatedByUser")
                        .WithMany("CreatedItems")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.Doctor", "Doctor")
                        .WithMany("ReferralItems")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.Patient", "Patient")
                        .WithMany("ReferralItems")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.ReferralPack", "ReferralPack")
                        .WithMany("ReferralItems")
                        .HasForeignKey("ReferralPackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.TestReason", "TestReason")
                        .WithMany("ReferralItems")
                        .HasForeignKey("TestReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("ReferralPack");

                    b.Navigation("TestReason");
                });

            modelBuilder.Entity("CovidDoc.Model.Signature", b =>
                {
                    b.HasOne("CovidDoc.Model.Document", "Document")
                        .WithMany("Signatures")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidDoc.Model.AppUser", "SignatoryUser")
                        .WithMany("Signatures")
                        .HasForeignKey("SignatoryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("SignatoryUser");
                });

            modelBuilder.Entity("CovidDoc.Model.StatusTransition", b =>
                {
                    b.HasOne("CovidDoc.Model.DocumentStatus", "InitialStatus")
                        .WithMany("FromTransitions")
                        .HasForeignKey("InitialStatusId");

                    b.HasOne("CovidDoc.Model.DocumentStatus", "TargetStatus")
                        .WithMany("ToTransitions")
                        .HasForeignKey("TargetStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitialStatus");

                    b.Navigation("TargetStatus");
                });

            modelBuilder.Entity("CovidDoc.Model.Vaccination", b =>
                {
                    b.HasOne("CovidDoc.Model.ReferralItem", null)
                        .WithOne("Vaccination")
                        .HasForeignKey("CovidDoc.Model.Vaccination", "ReferralItemVaccinationId");

                    b.HasOne("CovidDoc.Model.VaccineType", "VaccineType")
                        .WithMany("Vaccinations")
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("CovidDoc.Model.Work", b =>
                {
                    b.HasOne("CovidDoc.Model.Patient", "Patient")
                        .WithMany("Works")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CovidDoc.Model.ReferralPack", b =>
                {
                    b.HasOne("CovidDoc.Model.Organization", "Laboratory")
                        .WithOne()
                        .HasForeignKey("CovidDoc.Model.ReferralPack", "LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("CovidDoc.Model.Smso", b =>
                {
                    b.OwnsOne("CovidDoc.Model.SmsoConnection", "SmsoConnection", b1 =>
                        {
                            b1.Property<long>("SmsoId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Database")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Host")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Port")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT");

                            b1.HasKey("SmsoId");

                            b1.ToTable("Mis");

                            b1.WithOwner()
                                .HasForeignKey("SmsoId");
                        });

                    b.Navigation("SmsoConnection");
                });

            modelBuilder.Entity("CovidDoc.Model.AppUser", b =>
                {
                    b.Navigation("CreatedDocuments");

                    b.Navigation("CreatedItems");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("CovidDoc.Model.Document", b =>
                {
                    b.Navigation("ModifiedByUser");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("CovidDoc.Model.DocumentStatus", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("FromTransitions");

                    b.Navigation("ToTransitions");
                });

            modelBuilder.Entity("CovidDoc.Model.IdentityDocumentType", b =>
                {
                    b.Navigation("IdentityDocuments");
                });

            modelBuilder.Entity("CovidDoc.Model.LabService", b =>
                {
                    b.Navigation("LabOrders");
                });

            modelBuilder.Entity("CovidDoc.Model.Organization", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Children");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("CovidDoc.Model.Patient", b =>
                {
                    b.Navigation("IdentityDocuments");

                    b.Navigation("ReferralItems");

                    b.Navigation("RegAddress");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("CovidDoc.Model.ReferralItem", b =>
                {
                    b.Navigation("Hospitalization");

                    b.Navigation("LabOrder");

                    b.Navigation("LabResult");

                    b.Navigation("RecurrenceDisease");

                    b.Navigation("Vaccination");
                });

            modelBuilder.Entity("CovidDoc.Model.ResearchResult", b =>
                {
                    b.Navigation("LabResults");
                });

            modelBuilder.Entity("CovidDoc.Model.ResearchType", b =>
                {
                    b.Navigation("LabResults");
                });

            modelBuilder.Entity("CovidDoc.Model.StatusTransition", b =>
                {
                    b.Navigation("GrantedForRoles");
                });

            modelBuilder.Entity("CovidDoc.Model.TestReason", b =>
                {
                    b.Navigation("ReferralItems");
                });

            modelBuilder.Entity("CovidDoc.Model.TestSystem", b =>
                {
                    b.Navigation("LabOrders");
                });

            modelBuilder.Entity("CovidDoc.Model.VaccineType", b =>
                {
                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("CovidDoc.Model.Doctor", b =>
                {
                    b.Navigation("ReferralItems");
                });

            modelBuilder.Entity("CovidDoc.Model.ReferralPack", b =>
                {
                    b.Navigation("ReferralItems");
                });
#pragma warning restore 612, 618
        }
    }
}
