//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.7.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CovidDoc.Model
{
   /// <inheritdoc/>
   public partial class CovidDocModel : DbContext
   {
      #region DbSets

      /// <summary>
      /// Repository for global::CovidDoc.Model.Address - Адрес
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Address> Address { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.AppRole - Роль пользователя
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.AppRole> AppRole { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.AppUser - Пользователь приложения
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.AppUser> AppUser { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Doctor - Врач
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Doctor> Doctor { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Document - Документ
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Document> Document { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.DocumentStatus - Статус документа
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.DocumentStatus> DocumentStatus { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Hospitalization - Сведения о госпитализации
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Hospitalization> Hospitalization { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.IdentityDocument - Документ удостоверяющий
      /// личность
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.IdentityDocument> IdentityDocument { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.IdentityDocumentType - Тип документа удостоверяющего
      /// личность
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.IdentityDocumentType> IdentityDocumentType { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.LabOrder - Заказ
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.LabOrder> LabOrder { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.LabResult - Результат исследования
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.LabResult> LabResult { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.LabService - Лабораторная услуга
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.LabService> LabService { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Mis - Медицинская информационная система
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Mis> Mis { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Organization - Базовый класс для сущностей
      /// юрлиц
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Organization> Organization { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Patient - Пациент
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Patient> Patient { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.RecurrenceDisease - Сведения о повторном заболевании
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.RecurrenceDisease> RecurrenceDisease { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.ReferralItem - Направление на мазок
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.ReferralItem> ReferralItem { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.ReferralPack> ReferralPack { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.ResearchResult - Тип результата
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.ResearchResult> ResearchResult { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.ResearchType - Тип исследования
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.ResearchType> ResearchType { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Signature - ЭП документа
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Signature> Signature { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Smso - СМСО
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Smso> Smso { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.SmsoEventType - Тип события СМСО
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.SmsoEventType> SmsoEventType { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.StatusTransition - Переход между состояниями
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.StatusTransition> StatusTransition { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.TestReason - Основание для направления на мазок
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.TestReason> TestReason { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.TestSystem - Тест система
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.TestSystem> TestSystem { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Vaccination - Сведения о вакцинации
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Vaccination> Vaccination { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.VaccineType - Тип вакцины
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.VaccineType> VaccineType { get; set; }

      /// <summary>
      /// Repository for global::CovidDoc.Model.Work - Место работы
      /// </summary>
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::CovidDoc.Model.Work> Work { get; set; }

      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Name=CovidDoc";

      /// <summary>
      ///     <para>
      ///         Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class using the specified options.
      ///         The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be called to allow further
      ///         configuration of the options.
      ///     </para>
      /// </summary>
      /// <param name="options">The options for this context.</param>
      public CovidDocModel(DbContextOptions<CovidDocModel> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         optionsBuilder.UseLazyLoadingProxies();

         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <summary>
      ///     Override this method to further configure the model that was discovered by convention from the entity types
      ///     exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
      ///     and re-used for subsequent instances of your derived context.
      /// </summary>
      /// <remarks>
      ///     If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
      ///     then this method will not be run.
      /// </remarks>
      /// <param name="modelBuilder">
      ///     The builder being used to construct the model for this context. Databases (and other extensions) typically
      ///     define extension methods on this object that allow you to configure aspects of the model that are specific
      ///     to a given database.
      /// </param>
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .ToTable("Address")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.Region)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Address>().HasIndex(t => t.Region)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.District)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Address>().HasIndex(t => t.District)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.Town)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Address>().HasIndex(t => t.Town)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.Street)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Address>().HasIndex(t => t.Street)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.House)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Address>().HasIndex(t => t.House)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.Building)
                     .HasMaxLength(255);
         modelBuilder.Entity<global::CovidDoc.Model.Address>().HasIndex(t => t.Building)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Address>()
                     .Property(t => t.Appartment)
                     .HasMaxLength(255);
         modelBuilder.Entity<global::CovidDoc.Model.Address>().HasIndex(t => t.Appartment)
                     .IsUnique();

         modelBuilder.Entity<global::CovidDoc.Model.AppRole>()
                     .ToTable("AppRole")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.AppRole>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppRole>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppRole>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.AppRole>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .ToTable("AppUser")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .Property(t => t.UserName)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>().HasIndex(t => t.UserName)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .Property(t => t.Password)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .Property(t => t.Fio)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .Property(t => t.Disabled)
                     .IsRequired()
                     .HasDefaultValue(false);
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .HasMany<global::CovidDoc.Model.AppRole>(p => p.Roles)
                     .WithMany(p => p.Users)
                     .UsingEntity(x => x.ToTable("AppRole_Users_x_AppUser_Roles"));
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .HasMany<global::CovidDoc.Model.Document>(p => p.CreatedDocuments)
                     .WithOne(p => p.CreateByUser)
                     .HasForeignKey("CreateByUserId");
         modelBuilder.Entity<global::CovidDoc.Model.Document>().Navigation(e => e.CreateByUser).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .HasMany<global::CovidDoc.Model.Signature>(p => p.Signatures)
                     .WithOne(p => p.SignatoryUser)
                     .HasForeignKey("SignatoryUserId");
         modelBuilder.Entity<global::CovidDoc.Model.Signature>().Navigation(e => e.SignatoryUser).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>()
                     .HasMany<global::CovidDoc.Model.ReferralItem>(p => p.CreatedItems)
                     .WithOne(p => p.CreatedByUser)
                     .HasForeignKey("CreatedByUserId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>().Navigation(e => e.CreatedByUser).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Doctor>()
                     .HasMany<global::CovidDoc.Model.ReferralItem>(p => p.ReferralItems)
                     .WithOne(p => p.Doctor)
                     .HasForeignKey("DoctorId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>().Navigation(e => e.Doctor).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Document>()
                     .ToTable("Document")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Document>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Document>()
                     .Property(t => t.CreateDateTime)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Document>()
                     .Property(t => t.ModifyDateTime)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Document>()
                     .Property(t => t.DocumentDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Document>()
                     .HasMany<global::CovidDoc.Model.AppUser>(p => p.ModifiedByUser)
                     .WithOne()
                     .HasForeignKey("DocumentModifiedByUserId");
         modelBuilder.Entity<global::CovidDoc.Model.Document>()
                     .HasMany<global::CovidDoc.Model.Signature>(p => p.Signatures)
                     .WithOne(p => p.Document)
                     .HasForeignKey("DocumentId");
         modelBuilder.Entity<global::CovidDoc.Model.Signature>().Navigation(e => e.Document).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>()
                     .ToTable("DocumentStatus")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>()
                     .HasMany<global::CovidDoc.Model.StatusTransition>(p => p.FromTransitions)
                     .WithOne(p => p.InitialStatus)
                     .HasForeignKey("InitialStatusId");
         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>()
                     .HasMany<global::CovidDoc.Model.StatusTransition>(p => p.ToTransitions)
                     .WithOne(p => p.TargetStatus)
                     .HasForeignKey("TargetStatusId");
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>().Navigation(e => e.TargetStatus).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.DocumentStatus>()
                     .HasMany<global::CovidDoc.Model.Document>(p => p.Documents)
                     .WithOne(p => p.DocumentStatus)
                     .HasForeignKey("DocumentStatusId");
         modelBuilder.Entity<global::CovidDoc.Model.Document>().Navigation(e => e.DocumentStatus).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Hospitalization>()
                     .ToTable("Hospitalization")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Hospitalization>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Hospitalization>()
                     .Property(t => t.BeginDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Hospitalization>()
                     .Property(t => t.HospitalName)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Hospitalization>().HasIndex(t => t.HospitalName)
                     .IsUnique();

         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>()
                     .ToTable("IdentityDocument")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>()
                     .Property(t => t.Serial)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>().HasIndex(t => t.Serial)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>()
                     .Property(t => t.Number)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>().HasIndex(t => t.Number)
                     .IsUnique();

         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>()
                     .ToTable("IdentityDocumentType")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>().HasIndex(t => t.Code)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>()
                     .Property(t => t.SerialPattern)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>().HasIndex(t => t.SerialPattern)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>()
                     .Property(t => t.NumberPattern)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>().HasIndex(t => t.NumberPattern)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocumentType>()
                     .HasMany<global::CovidDoc.Model.IdentityDocument>(p => p.IdentityDocuments)
                     .WithOne(p => p.IdentityDocumentType)
                     .HasForeignKey("IdentityDocumentTypeId");
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>().Navigation(e => e.IdentityDocumentType).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.LabOrder>()
                     .ToTable("LabOrder")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.LabOrder>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.LabOrder>()
                     .Property(t => t.SendDate)
                     .IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.LabResult>()
                     .ToTable("LabResult")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.LabResult>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.LabResult>()
                     .Property(t => t.ResultDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.LabResult>()
                     .Property(t => t.ResultCode)
                     .IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.LabService>()
                     .ToTable("LabService")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.LabService>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.LabService>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.LabService>().HasIndex(t => t.Code)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.LabService>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.LabService>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.LabService>()
                     .HasMany<global::CovidDoc.Model.LabOrder>(p => p.LabOrders)
                     .WithOne(p => p.LabService)
                     .HasForeignKey("LabServiceId");
         modelBuilder.Entity<global::CovidDoc.Model.LabOrder>().Navigation(e => e.LabService).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Mis>()
                     .ToTable("Mis")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Mis>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .ToTable("Organization")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .Property(t => t.Orgn)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>().HasIndex(t => t.Orgn);
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .Property(t => t.IsLab)
                     .IsRequired()
                     .HasDefaultValue(false);
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .Property(t => t.IsHospital)
                     .IsRequired()
                     .HasDefaultValue(true);
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .Property(t => t.Email)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>().HasIndex(t => t.Email)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .HasMany<global::CovidDoc.Model.AppUser>(p => p.AppUsers)
                     .WithOne(p => p.Organization)
                     .HasForeignKey("OrganizationId");
         modelBuilder.Entity<global::CovidDoc.Model.AppUser>().Navigation(e => e.Organization).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>().Navigation(e => e.AppUsers).AutoInclude();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .HasMany<global::CovidDoc.Model.Document>(p => p.Documents)
                     .WithOne(p => p.Organization)
                     .HasForeignKey("OrganizationId");
         modelBuilder.Entity<global::CovidDoc.Model.Document>().Navigation(e => e.Organization).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Organization>()
                     .HasMany<global::CovidDoc.Model.Organization>(p => p.Children)
                     .WithOne(p => p.Parent)
                     .HasForeignKey("ParentId");

         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .ToTable("Patient")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.LastName)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().HasIndex(t => t.LastName)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.FirstName)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().HasIndex(t => t.FirstName)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.PatrName)
                     .HasMaxLength(255);
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().HasIndex(t => t.PatrName)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.BirthDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.Sex)
                     .IsRequired()
                     .HasDefaultValue(2);
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.Snils)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().HasIndex(t => t.Snils)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.Phone)
                     .HasMaxLength(255)
                     .IsRequired()
                     .HasDefaultValue("Номер телефона");
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().HasIndex(t => t.Phone)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.Policy)
                     .HasMaxLength(255)
                     .IsRequired()
                     .HasDefaultValue("Номер полиса ОМС единого образца");
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().HasIndex(t => t.Policy)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .Property(t => t.ParentFio)
                     .HasMaxLength(255);
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().HasIndex(t => t.ParentFio)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .HasOne<global::CovidDoc.Model.Address>(p => p.RegAddress)
                     .WithOne()
                     .HasForeignKey("Address", "PatientRegAddressId");
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .HasOne<global::CovidDoc.Model.Address>(p => p.FactAddress)
                     .WithOne()
                     .HasForeignKey("Patient", "FactAddressId");
         modelBuilder.Entity<global::CovidDoc.Model.Patient>().Navigation(e => e.FactAddress).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .HasMany<global::CovidDoc.Model.IdentityDocument>(p => p.IdentityDocuments)
                     .WithOne(p => p.Patient)
                     .HasForeignKey("PatientId");
         modelBuilder.Entity<global::CovidDoc.Model.IdentityDocument>().Navigation(e => e.Patient).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .HasMany<global::CovidDoc.Model.ReferralItem>(p => p.ReferralItems)
                     .WithOne(p => p.Patient)
                     .HasForeignKey("PatientId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>().Navigation(e => e.Patient).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Patient>()
                     .HasMany<global::CovidDoc.Model.Work>(p => p.Works)
                     .WithOne(p => p.Patient)
                     .HasForeignKey("PatientId");
         modelBuilder.Entity<global::CovidDoc.Model.Work>().Navigation(e => e.Patient).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.RecurrenceDisease>()
                     .ToTable("RecurrenceDisease")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.RecurrenceDisease>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.RecurrenceDisease>()
                     .Property(t => t.BeginDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.RecurrenceDisease>()
                     .Property(t => t.MKB)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.RecurrenceDisease>().HasIndex(t => t.MKB)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.RecurrenceDisease>()
                     .Property(t => t.UNRZ)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.RecurrenceDisease>().HasIndex(t => t.UNRZ)
                     .IsUnique();

         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .ToTable("ReferralItem")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.ProbeDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.LastVisitDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.MKB)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>().HasIndex(t => t.MKB)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.IsLeaveCountry)
                     .IsRequired()
                     .HasDefaultValue(false);
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.Patalogy)
                     .HasMaxLength(4096);
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>().HasIndex(t => t.Patalogy)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.DeliveryDate)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .Property(t => t.Ct)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .HasOne<global::CovidDoc.Model.RecurrenceDisease>(p => p.RecurrenceDisease)
                     .WithOne()
                     .HasForeignKey("RecurrenceDisease", "ReferralItemRecurrenceDiseaseId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .HasOne<global::CovidDoc.Model.Vaccination>(p => p.Vaccination)
                     .WithOne()
                     .HasForeignKey("Vaccination", "ReferralItemVaccinationId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .HasOne<global::CovidDoc.Model.Hospitalization>(p => p.Hospitalization)
                     .WithOne()
                     .HasForeignKey("Hospitalization", "ReferralItemHospitalizationId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .HasOne<global::CovidDoc.Model.LabOrder>(p => p.LabOrder)
                     .WithOne()
                     .HasForeignKey("LabOrder", "ReferralItemLabOrderId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>()
                     .HasOne<global::CovidDoc.Model.LabResult>(p => p.LabResult)
                     .WithOne()
                     .HasForeignKey("LabResult", "ReferralItemLabResultId");

         modelBuilder.Entity<global::CovidDoc.Model.ReferralPack>()
                     .HasOne<global::CovidDoc.Model.Organization>(p => p.Laboratory)
                     .WithOne()
                     .HasForeignKey("ReferralPack", "LaboratoryId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralPack>().Navigation(e => e.Laboratory).IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ReferralPack>()
                     .HasMany<global::CovidDoc.Model.ReferralItem>(p => p.ReferralItems)
                     .WithOne(p => p.ReferralPack)
                     .HasForeignKey("ReferralPackId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>().Navigation(e => e.ReferralPack).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.ResearchResult>()
                     .ToTable("ResearchResult")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.ResearchResult>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchResult>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchResult>().HasIndex(t => t.Code)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchResult>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchResult>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchResult>()
                     .HasMany<global::CovidDoc.Model.LabResult>(p => p.LabResults)
                     .WithOne(p => p.ResearchResult)
                     .HasForeignKey("ResearchResultId");
         modelBuilder.Entity<global::CovidDoc.Model.LabResult>().Navigation(e => e.ResearchResult).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.ResearchType>()
                     .ToTable("ResearchType")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.ResearchType>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchType>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchType>().HasIndex(t => t.Code)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchType>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchType>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.ResearchType>()
                     .HasMany<global::CovidDoc.Model.LabResult>(p => p.LabResults)
                     .WithOne(p => p.ResearchType)
                     .HasForeignKey("ResearchTypeId");
         modelBuilder.Entity<global::CovidDoc.Model.LabResult>().Navigation(e => e.ResearchType).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Signature>()
                     .ToTable("Signature")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Signature>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Signature>()
                     .Property(t => t.SignDateTime)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Signature>()
                     .Property(t => t.SignData)
                     .IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Smso>().OwnsOne(p => p.SmsoConnection).Property(p => p.Host)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Smso>().OwnsOne(p => p.SmsoConnection).Property(p => p.Port)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Smso>().OwnsOne(p => p.SmsoConnection).Property(p => p.Database)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Smso>().OwnsOne(p => p.SmsoConnection).Property(p => p.UserName)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Smso>().OwnsOne(p => p.SmsoConnection).Property(p => p.Password)
                     .IsRequired();

         modelBuilder.Owned<global::CovidDoc.Model.SmsoConnection>();

         modelBuilder.Entity<global::CovidDoc.Model.SmsoEventType>()
                     .ToTable("SmsoEventType")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.SmsoEventType>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>()
                     .ToTable("StatusTransition")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>()
                     .Property(t => t.EnablePredicate)
                     .HasMaxLength(4096);
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>()
                     .Property(t => t.AutoRunPredicate)
                     .HasMaxLength(4096);
         modelBuilder.Entity<global::CovidDoc.Model.StatusTransition>()
                     .HasMany<global::CovidDoc.Model.AppRole>(p => p.GrantedForRoles)
                     .WithOne()
                     .HasForeignKey("StatusTransitionGrantedForRolesId");

         modelBuilder.Entity<global::CovidDoc.Model.TestReason>()
                     .ToTable("TestReason")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.TestReason>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.TestReason>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.TestReason>().HasIndex(t => t.Code)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.TestReason>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.TestReason>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.TestReason>()
                     .HasMany<global::CovidDoc.Model.ReferralItem>(p => p.ReferralItems)
                     .WithOne(p => p.TestReason)
                     .HasForeignKey("TestReasonId");
         modelBuilder.Entity<global::CovidDoc.Model.ReferralItem>().Navigation(e => e.TestReason).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.TestSystem>()
                     .ToTable("TestSystem")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.TestSystem>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.TestSystem>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.TestSystem>().HasIndex(t => t.Code)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.TestSystem>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.TestSystem>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.TestSystem>()
                     .HasMany<global::CovidDoc.Model.LabOrder>(p => p.LabOrders)
                     .WithOne(p => p.TestSystem)
                     .HasForeignKey("TestSystemId");
         modelBuilder.Entity<global::CovidDoc.Model.LabOrder>().Navigation(e => e.TestSystem).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Vaccination>()
                     .ToTable("Vaccination")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Vaccination>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Vaccination>()
                     .Property(t => t.LastVaccinationDate)
                     .IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.VaccineType>()
                     .ToTable("VaccineType")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.VaccineType>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.VaccineType>()
                     .Property(t => t.Code)
                     .HasMaxLength(50)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.VaccineType>().HasIndex(t => t.Code)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.VaccineType>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.VaccineType>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.VaccineType>()
                     .HasMany<global::CovidDoc.Model.Vaccination>(p => p.Vaccinations)
                     .WithOne(p => p.VaccineType)
                     .HasForeignKey("VaccineTypeId");
         modelBuilder.Entity<global::CovidDoc.Model.Vaccination>().Navigation(e => e.VaccineType).IsRequired();

         modelBuilder.Entity<global::CovidDoc.Model.Work>()
                     .ToTable("Work")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::CovidDoc.Model.Work>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Work>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Work>().HasIndex(t => t.Name)
                     .IsUnique();
         modelBuilder.Entity<global::CovidDoc.Model.Work>()
                     .Property(t => t.Address)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::CovidDoc.Model.Work>().HasIndex(t => t.Address)
                     .IsUnique();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
